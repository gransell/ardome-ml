import os
 
def flags( env, prefix ):
	env.requires( 'xerces' )

	env.Append( CPPPATH = [ os.path.join( prefix, 'include', 'ardome-ml' ) ] )
	env.Append( CPPDEFINES = [ 'OPENMEDIALIB_BUILD', 'OPENPLUGINLIB_BUILD', 'OPENIMAGELIB_BUILD' ] )
	if env.debug:
		env.Append( LIBPATH = [ os.path.join( prefix, 'lib', 'debug' ) ] )
	else:
		env.Append( LIBPATH = [ os.path.join( prefix, 'lib', 'release' ) ] )
		
	env.Append( LIBS= [ 'opencorelib_cl.lib', 'openimagelib_il.lib', 'openpluginlib_pl.lib', 'openmedialib_ml.lib' ] )

def install( env, prefix ):

	if env.debug : folder_name = 'debug'
	else: folder_name = 'release'

	dlls = ['opencorelib_cl.dll',
			'opencorelib_cl.pdb',
			'openimagelib_il.dll',
			'openimagelib_il.pdb',
			'openpluginlib_pl.dll',
			'openpluginlib_pl.pdb',
			'openmedialib_ml.dll',
			'openmedialib_ml.pdb',
			'avformat-54.dll',
			'avcodec-54.dll',
			'avdevice-53.dll',
			'avfilter-2.dll',
			'avutil-51.dll',
			'swscale-2.dll',
			'swresample-0.dll',
			'SDL.dll',
			'freetype6.dll',
			'intl.dll',
			'libcairo-gobject-2.dll',
			'libcairo-script-interpreter-2.dll',
			'libcroco-0.6-3.dll',
			'libexpat-1.dll',
			'libfontconfig-1.dll',
			'libgdk_pixbuf-2.0-0.dll',
			'libgio-2.0-0.dll',
			'libglib-2.0-0.dll',
			'libgmodule-2.0-0.dll',
			'libgobject-2.0-0.dll',
			'libgthread-2.0-0.dll',
			'libpango-1.0-0.dll',
			'libpangocairo-1.0-0.dll',
			'libpangoft2-1.0-0.dll',
			'libpangowin32-1.0-0.dll',
			'libpixbufloader-svg.dll',
			'libpng14-14.dll',
			'librsvg-2-2.dll',
			'libsvg.dll',
			'libxml2-2.dll',
			'libcairo-2.dll',
			'zlib1.dll',
		]

	for dll in dlls :
		env.release( [ os.path.join( prefix, 'bin', folder_name, dll ) ] )

	should_build_wrappers = False
	try:
		should_build_wrappers = env['target'] == 'vs2008' and ( env['wrappers'] == 'yes' )
	except KeyError:
		pass

	if should_build_wrappers :
		#.NET wrappers
		env.release(  [ os.path.join( prefix, 'bin', folder_name, 'OWL.dll') ] )
		env.release(  [ os.path.join( prefix, 'bin', folder_name, 'AML.dll') ] )

	#OpenAL + OpenAL Soft
	env.release( [os.path.join( prefix, 'bin', folder_name, 'OpenAL32.dll') ] ) 
	env.release( [os.path.join( prefix, 'bin', folder_name, 'soft_oal.dll') ] ) 

	#env.install_dir( os.path.join( env[ 'stage_libdir' ], 'site-packages' ), [ os.path.join( prefix, 'lib', folder_name, 'site-packages') ] )
	env.release( [ os.path.join( prefix, 'bin', folder_name, 'amlbatch.exe' ) ] )
	if folder_name == 'release':
		pass
		#env.release( [ os.path.join( prefix, 'bin', folder_name, 'amlclient' ) ] )
		#env.release( [ os.path.join( prefix, 'bin', folder_name, 'amlshell' ) ] )
		#env.release( [ os.path.join( prefix, 'bin', folder_name, 'amltransport' ) ] )
		#env.release( [ os.path.join( prefix, 'bin', folder_name, 'amlserver' ) ] )
		#env.release( [ os.path.join( prefix, 'bin', folder_name, 'amltkplay' ) ] )

	if env.full_install : env.release(  [ os.path.join( prefix, 'lib', folder_name, 'opencorelib_cl.lib') ] )
	if env.full_install : env.release(  [ os.path.join( prefix, 'lib', folder_name, 'openpluginlib_pl.lib') ] )
	if env.full_install : env.release(  [ os.path.join( prefix, 'lib', folder_name, 'openmedialib_ml.lib') ] )
	if env.full_install : env.release(  [ os.path.join( prefix, 'lib', folder_name, 'openimagelib_il.lib') ] )
	
	env.install_dir( os.path.join( env[ 'stage_bin' ], 'aml-plugins' ), os.path.join( prefix, 'bin', folder_name, 'aml-plugins') )
	env.install_dir( os.path.join( env[ 'stage_bin' ], 'profiles' ), os.path.join( prefix, 'bin', folder_name, 'profiles') )
	env.install_dir( os.path.join( env[ 'stage_bin' ], 'schemas' ), os.path.join( prefix, 'bin', folder_name, 'schemas') )
	env.install_dir( os.path.join( env[ 'stage_bin' ], 'fix_stream' ), os.path.join( prefix, 'bin', folder_name, 'fix_stream') )

