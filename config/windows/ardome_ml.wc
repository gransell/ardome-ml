import os
 
def flags( env, prefix ):
	env.requires( 'xerces' )

	env.Append( CPPPATH = [ os.path.join( prefix, 'include', 'ardome-ml' ) ] )
	env.Append( CPPDEFINES = [ 'OPENMEDIALIB_BUILD', 'OPENPLUGINLIB_BUILD', 'OPENIMAGELIB_BUILD' ] )
	if env.debug:
		env.Append( LIBPATH = [ os.path.join( prefix, 'lib', 'debug' ) ] )
	else:
		env.Append( LIBPATH = [ os.path.join( prefix, 'lib', 'release' ) ] )
		
	env.Append( LIBS= [ 'opencorelib_cl.lib', 'openimagelib_il.lib', 'openpluginlib_pl.lib', 'openmedialib_ml.lib' ] )

def install( env, prefix ):

	if env.debug : folder_name = 'debug'
	else: folder_name = 'release'
	
	env.release(  [ os.path.join( prefix, 'bin', folder_name, 'opencorelib_cl.dll') ] )
	env.release(  [ os.path.join( prefix, 'bin', folder_name, 'opencorelib_cl.pdb') ] )
	env.release(  [ os.path.join( prefix, 'bin', folder_name, 'openimagelib_il.dll') ] )
	env.release(  [ os.path.join( prefix, 'bin', folder_name, 'openimagelib_il.pdb') ] )
	env.release(  [ os.path.join( prefix, 'bin', folder_name, 'openpluginlib_pl.dll') ] )
	env.release(  [ os.path.join( prefix, 'bin', folder_name, 'openpluginlib_pl.pdb') ] )
	env.release(  [ os.path.join( prefix, 'bin', folder_name, 'openmedialib_ml.dll') ] )
	env.release(  [ os.path.join( prefix, 'bin', folder_name, 'openmedialib_ml.pdb') ] )

	if env.full_install : env.release(  [ os.path.join( prefix, 'lib', folder_name, 'opencorelib_cl.lib') ] )
	if env.full_install : env.release(  [ os.path.join( prefix, 'lib', folder_name, 'openpluginlib_pl.lib') ] )
	if env.full_install : env.release(  [ os.path.join( prefix, 'lib', folder_name, 'openmedialib_ml.lib') ] )
	if env.full_install : env.release(  [ os.path.join( prefix, 'lib', folder_name, 'openimagelib_il.lib') ] )
	
	env.install_dir( os.path.join( env[ 'stage_bin' ], 'aml-plugins' ), os.path.join( prefix, 'bin', folder_name, 'aml-plugins') )



