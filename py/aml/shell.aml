
# Include the core definitions
core.aml

# Block the playing thread

: block
	play_filter threader active=2 drop
;

# Unblock the playing thread

: unblock
	play_filter threader active=1 drop
;

# Grab the current playing graph

: current
	-1 grab
;

# Convenience, block and grab

: ( 
	block 
	current 
;

# Convenience, tag, drop current and unblock

: ) 
	tag
	drop 
	unblock 
	dirty
;

# Attach a filter to an acquired node

: attach		# <world> <original> <modified>
	rot rot 	# <modified> <world> <original>
	parent		# <modified> <world> <original> <parent> <slot>
	rot			# <modified> <world> <parent> <slot> <original>
	drop		# <modified> <world> <parent> <slot>
	3 roll 		# <world> <parent> <slot> <modified>
	swap 		# <world> <parent> <modified> <slot>
	connect		# <world> <modified-parent>
;

# Detach a filter from an acquired node

: detach
	decap
	attach
;

# Define some basic transport controls

: play 1 speed ;
: pause 0 speed ;
: rew -100 speed ;
: ffwd 100 speed ;
: reverse -1 speed ;

# Step for a number for frames
# <frames> step --

: step 
	position? + 
	0 max
	seek 
;

: step!
	position? + 
	0 max
	seek!
;

# Toggle pause/play

: toggle
	speed? 0 = speed
;

# Step in a loop - current speed is saved on the return stack at the start,
# playout is paused and original speed is recovered when the loop is complete
# <speed> <frames> step* --

: step*
	dup 
	speed? >r
	pause
	begin 
		1- dup 0 >=
	while 
		2 pick step 
	repeat 
	drop drop drop
	r> speed
;

# Schedule all media on the stack to the playlist
# <input1> ... <inputN> schedule --

: add*
	for_each
		add
	repeat
;

: add$
	depth? add*
;

: grab*
	loop
		0 grab
	repeat
;

: switch
	speed? 1 = if -1 else 1 then
	speed
;

: pitch?
	play_filter pitch ? speed
	nip
;

: pitch
	play_filter pitch speed=%s
	drop
;

: volume?
	play_filter volume ? volume
	nip
;

: volume
	play_filter volume volume=%s
	drop
;

: sfwd 
	10 pitch 
	0 volume 
	1 speed 
;

: srew 
	10 pitch 
	0 volume 
	-1 speed 
;

: normal 
	1 pitch 
	1 volume 
	1 speed 
;

: remove
	grab
	drop
;

: bless
	55378 server
;

: fullscreen
	store @video.fullscreen=%s .
;

: audio_scrub
	store audio_scrub=%s .
;

: bt
	bless transport
;

# Replace the current playing item with the top of the stack while preserving position

: replace
dup 0 insert position? s. next 
;

: apply
( parse$ execute replace ) 
;

: apply@
(
    parse find_all. pack
    parse$ variable! cmds 
    [ cmds @ execute drop ] 
)
;


