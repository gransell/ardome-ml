# (C) Ardendo SE 2008
#
# Released under the LGPL

from copy import copy

Import(['local_env'])

local_env.packages( 'build_cl', 'boost_filesystem', 'boost_system', 'boost_date_time', 'boost_thread', 'boost_regex', 'xerces', 'loki', 'uuid' )

if local_env[ 'PLATFORM' ] == 'darwin':
	local_env[ 'FRAMEWORKS' ] = [ 'Foundation' ]

local_env.Append( CPPDEFINES = [ 'PREFIX=\\\"' + local_env[ 'prefix' ] + '\\\"', 'AMF_VERSION=\\\"0.0.1\\\"' ] )

sources = [ 
	'assembly_class_creator.cpp',
	'assembly_class_factory.cpp',
	'assert.cpp',
	'assert_persistance.cpp',
	'assert_presenter.cpp',
	'base_exception.cpp',
	'basic_enums.cpp',
	'central_plugin_factory.cpp',
	'color.cpp',
	'core.cpp',
	'core_enums.cpp',
	'create_selection_dialog.cpp',
	'deserializer.cpp',
	'detail/plugin_metadata_saxhandler.cpp',
	'enforce.cpp',
	'exception_context.cpp',
	'exception_presenter.cpp',
	'frames.cpp',
	'function_job.cpp',
	'invoker.cpp',
	'ip_address.cpp',
	'jobbase.cpp',
	'logger.cpp',
	'loghandler.cpp',
	'logprinter.cpp',
	'logtarget.cpp',
	'media_definitions.cpp',
	'media_time.cpp',
	'message_queue.cpp',
	'object.cpp',
	'plugin_class_base_implementation.cpp',
	'plugin_loader.cpp',
	'plugin_metadata.cpp',
	'point.cpp',
	'property_bag.cpp',
	'profile.cpp',
	'rectangle.cpp',
	'serious_error_handler.cpp',
	'size.cpp',
	'span.cpp',
	# 'special_folders.cpp', This file is not needed, empty.
	'stream_logtarget.cpp',
	'string_conversions.cpp',
	'str_util.cpp',
	'thread_pool.cpp',
	'time_code.cpp',
	'time_helpers.cpp',
	'utilities.cpp',
	'uuid_16b.cpp',
	'worker.cpp',
	'xerces_sax_handler.cpp',
	'xerces_sax_traverser.cpp',
	'xml_sax_parser.cpp' ] 

mac_sources = [
	'mac/mac_selection_dlg.cpp',
	'mac/invoker_impl.cpp',
	'mac/special_folders_impl.cpp',
	'mac/stack_walker.cpp',
	'mac/stack_dump.cpp' ]

mac_objc = [ 'mac/mac_invoker.mm', 'mac/special_folders_mac.mm' ]

linux_sources = [ 'unix/special_folders_unix.cpp' ]

win32_sources = [
	'dynlib.cpp',
	'msw/debughlp.cpp',
	'msw/core.rc',
	#'msw/serious_error_handler.cpp',
	'msw/subclass.cpp',
	'msw/dlmsw.cpp',
	'msw/special_folders.cpp',
	#'msw/icon2.ico',
	'msw/stack_walker.cpp',
	'msw/windows_invoker.cpp',
	'msw/enum_process_modules.cpp']

if local_env[ 'PLATFORM' ] == 'win32' :
	local_env.Append( CPPDEFINES = [ '_SCL_SECURE_NO_WARNINGS' ] )
	local_env.Append( LIBS = ['version.lib', 'psapi.lib'] )
    
extras = { 'posix' : linux_sources, 'darwin' : mac_sources, 'win32' : win32_sources }
objc = { 'posix' : [ ], 'darwin' : mac_objc, 'win32' : [ ] }

cl_headers = local_env.Glob('*.hpp', True, False, True)

objc_flags = copy( local_env[ 'CCFLAGS' ] )
objc_flags.append( '-fobjc-gc' )
object = local_env.shared_library( 'opencorelib_cl', sources = sources + extras[ local_env[ 'PLATFORM' ] ] + local_env.shared_object( objc[ local_env[ 'PLATFORM' ] ], 
									CCFLAGS = objc_flags ), headers = cl_headers, pre = [ 'precompiled_headers.cpp', 'precompiled_headers.hpp' ] )

local_env.release( object )

if local_env[ 'PLATFORM' ] != 'win32' :
	local_env.copy_project_files( local_env[ 'cl_include' ], [ 
		'assembly_class_creator.hpp',
		'assembly_class_factory.hpp',
		'assert_defines.hpp',
		'assert.hpp',
		'assert_persistance.hpp',
		'assert_presenter.hpp',
		'base_exception.hpp',
		'basic_enums.hpp',
		'boost_headers.hpp',
		'boost_link_defines.hpp',
		'central_plugin_factory.hpp',
		'color.hpp',
		'config.hpp',
		'core_enums.hpp',
		'core.hpp',
		'create_selection_dialog.hpp',
		'deserializer.hpp',
		'disabled_warnings.hpp',
		'doxygen_documentation.hpp',
		'enforce_defines.hpp',
		'enforce.hpp',
		'exception_context.hpp',
		'exception_presenter.hpp',
		'export_defines.hpp',
		'event_handler.hpp',
		'factory.hpp',
		'frames.hpp',
		'function_job.hpp',
		'guard_define.hpp',
		'initializer.hpp',
		'invoker.hpp',
		'ip_address.hpp',
		'jobbase.hpp',
		'local_plugin_factory.hpp',
		'log_defines.hpp',
		'logger.hpp',
		'loghandler.hpp',
		'logprinter.hpp',
		'logtarget.hpp',
		'machine_readable_errors.hpp',
		'macro_definitions.hpp',
		'media_definitions.hpp',
		'media_time.hpp',
		'message_queue.hpp',
		'minimal_string_defines.hpp',
		'object.hpp',
		'platform_defines.hpp',
		'platform.hpp',
		'plugin_class_base_implementation.hpp',
		'plugin_loader.hpp',
		'plugin_metadata.hpp',
		'point.hpp',
		'precompiled_headers.hpp',
		'profile.hpp',
		'profile_properties.hpp',
		'profile_types.hpp',
		'property_bag.hpp',
		'rectangle.hpp',
		'selection_dialog.hpp',
		'serializer.hpp',
		'serious_error_handler.hpp',
		'size.hpp',
		'span.hpp',
		'special_folders.hpp',
		'stack_walker.hpp',
		'stream_logtarget.hpp',
		'string_conversions.hpp',
		'string_defines.hpp',
		'str_util.hpp',
		'thread_pool.hpp',
		'throw_try_catch_defines.hpp',
		'time_code.hpp',
		'time_helpers.hpp',
		'typedefs.hpp',
		'utilities.hpp',
		'uuid_16b.hpp',
		'worker.hpp',
		'xerces_sax_handler.hpp',
		'xerces_sax_traverser.hpp',
		'xerces_typedefs.hpp',
		'xml_sax_parser.hpp'
	] )

local_env.copy_project_files( local_env[ 'stage_mf_schemas' ], [ 
	'schemas/amf-plugin.xsd',
] )

Return( 'object' )
