import os

#import owl.wrapper.c_sharp
import owl.wrapper.objc
from owl.reflection import header_file, header_files, assembly

from wrappers.objective_c import core_objc_bind_options
#from wrappers.csharp import core_c_sharp_bind_options

Import(['local_env'])

local_env.packages( 'boost_filesystem', 'boost_system', 'boost_date_time', 'boost_thread', 'boost_regex', 'loki' )

owl_output_dir = os.path.join( 'generated_wrappers', 'src' )
	
local_env.Append( CPPPATH = [ os.path.join(local_env.root, 'wrappers'), os.path.join(local_env.root, 'wrappers', owl_output_dir), 'objective_c/src', os.path.join( local_env.root, 'bcomp')] )

if local_env['PLATFORM'] == 'win32' :
	doxygen_path = os.path.join( local_env.root, 'bcomp', local_env['target'], 'doxygen.exe' )
else :
	doxygen_path = os.path.join( local_env.root, 'bcomp', 'doxygen', 'bin', 'doxygen' )

dep_asses = []
dep_headers = [ os.path.join( local_env.root, 'wrappers', 'built_in_types.hpp' ),]
dep_hfs = []
for dh in dep_headers :
	dep_hfs.append(header_file(str(dh)))
	
dep_asses.append(assembly( 'dep_ass', header_files( dep_hfs, doxygen_path, [], [] ), [] ))

defines = [('CORE_API', ''), ]
if local_env['PLATFORM'] == 'darwin' or local_env['PLATFORM'] == 'posix' :
	defines.extend([('OLIB_USE_UTF8', '1'), ('TCHAR', 'char'), ])
elif local_env['PLATFORM'] == 'win32' :
	defines.extend([('OLIB_USE_UTF16', '1'), ('TCHAR', 'wchar_t'), ])

cl_src_dir = os.path.join( local_env.root, 'src', 'opencorelib', 'cl' )

headers = [ header_file( os.path.join( cl_src_dir, 'core_enums.hpp') ),
			header_file( os.path.join( cl_src_dir, 'basic_enums.hpp') ),
			header_file( os.path.join( cl_src_dir, 'minimal_string_defines.hpp') ),
			header_file( os.path.join( cl_src_dir, 'media_definitions.hpp') ),
			header_file( os.path.join( cl_src_dir, 'time_code.hpp') ),
			header_file( os.path.join( cl_src_dir, 'media_time.hpp') ),
			header_file( os.path.join( cl_src_dir, 'frames.hpp') ),
			header_file( os.path.join( cl_src_dir, 'span.hpp') ),
			header_file( os.path.join( cl_src_dir, 'point.hpp') ),
			header_file( os.path.join( cl_src_dir, 'exception_context.hpp') ),]

owl_output_dir = os.path.join( local_env.root, 'wrappers', 'src' )

generate_files = True

if local_env['debug'] == '1' :
	print 'Debug build. Assuming AST and source files already generated by release build.'
	generate_files = False
	
		
# if generate_files :
print 'Building AST...'
files = header_files( headers, doxygen_path, defines, [] )
core_assembly = assembly( 'ArdomeML', files, dep_asses )

if local_env['PLATFORM'] == 'darwin' : 
	# if generate_files:
	objc_wrapper = owl.wrapper.objc.objc()
	objc_options = core_objc_bind_options( os.path.join( local_env.root, 'bcomp' ), 'output', [core_assembly] )

	wrapper_files = objc_wrapper.bind( core_assembly, objc_options, 'objective_c/src' )
	# else:
	# 	wrapper_files = {'source_files' : [], 'header_files' : [] }
	# 	wrapper_files['header_files'] = local_env.Glob(os.path.join(owl_output_dir, '*.hpp'), True, False, True)
	# 	wrapper_files['source_files'] = local_env.Glob(os.path.join(owl_output_dir, '*.mm'), True, False, True)
	
	obj = local_env.framework( 'ArdomeML', sources = wrapper_files['source_files'], headers = wrapper_files['header_files'], info_plist = 'objective_c/src/Info.plist' )
elif local_env['PLATFORM'] == 'win32' :    

	script_location = os.path.dirname( os.path.abspath( os.getcwd( ) ) )
	
	if generate_files :
		print 'Generating .NET source files...'
		csharp_wrapper = owl.wrapper.c_sharp.c_sharp()
		csharp_options = core_c_sharp_bind_options( os.path.join( local_env.root, 'external' ), owl_output_dir, [core_assembly] )

		wrapper_files = csharp_wrapper.bind( core_assembly, csharp_options )
	else :
		wrapper_files = {'source_files' : [], 'header_files' : [] }
		wrapper_files['header_files'] = local_env.Glob(os.path.join(owl_output_dir, '*.hpp'), True, False, True)
		wrapper_files['source_files'] = local_env.Glob(os.path.join(owl_output_dir, '*.cpp'), True, False, True)
	
	aux_dir = os.path.join( local_env.root, 'external', 'owl', 'wrapper', 'c_sharp', 'cppsrc' )
	aux_headers = local_env.Glob(os.path.join(aux_dir, '*.hpp'), True, False, True)
	aux_sources = local_env.Glob(os.path.join(aux_dir, '*.cpp'), True, False, True)
	
	wrapper_files['header_files'].extend(aux_headers)
	wrapper_files['source_files'].extend(aux_sources)
	
	local_env.Append( CPPFLAGS = [ '/EHa', '/clr', '/AI "C:\\program\\Reference Assemblies\\Microsoft\\Framework\\v3.0"', '/FU "WindowsBase.dll"' ] ) 
	obj = local_env.shared_library( 'AML', sources = wrapper_files['source_files'], 
									headers = wrapper_files['header_files'], pre = [ os.path.join(owl_output_dir, 'precompiled_headers.cpp'), os.path.join(owl_output_dir, 'precompiled_headers.hpp') ] )
	 
Return( 'obj' )
