import os

import owl.wrapper.c_sharp
import owl.wrapper.objc
from owl.reflection import header_file, header_files, assembly

from wrappers.objective_c import core_objc_bind_options
from wrappers.csharp import core_c_sharp_bind_options

Import(['local_env'])

local_env.packages( 'boost_filesystem', 'boost_system', 'boost_date_time', 'boost_thread', 'boost_regex', 'loki' )
# Add core to the include path
local_env.Append( CPPPATH = ['#/external'])

dep_asses = []
dep_headers = [ os.path.join( local_env.root, 'wrappers', 'built_in_types.hpp' ),]
dep_hfs = []
for dh in dep_headers :
	dep_hfs.append(header_file(str(dh)))
dep_asses.append(assembly( 'dep_ass', header_files( dep_hfs, [], [] ), [] ))

defines = [('CORE_API', ''), ]
if local_env['PLATFORM'] == 'darwin' or local_env['PLATFORM'] == 'posix' :
	defines.extend([('OLIB_USE_UTF8', '1'), ('TCHAR', 'char'), ])
elif local_env['PLATFORM'] == 'win32' :
	defines.extend([('OLIB_USE_UTF16', '1'), ('TCHAR', 'wchar_t'), ])

local_env.Append( CPPPATH = [ '#/wrappers/objective_c/src', '#/../AMF/trunk/layout/include', '#/../AMF/trunk/render/include' ] )

# cl_src_dir = os.path.join( local_env.root, 'src', 'opencorelib', 'cl' )

		
# headers = [ #header_file( os.path.join( project_root , 'wrappers', 'bind_typedefs.hpp' ) ),
			# header_file( os.path.join( cl_src_dir, 'core_enums.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'basic_enums.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'minimal_string_defines.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'media_definitions.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'time_code.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'media_time.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'frames.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'span.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'point.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'assert.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'color.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'enforce.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'exception_context.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'invoker.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'ip_address.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'worker.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'jobbase.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'event_handler.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'base_exception.hpp') ),	
			# header_file( os.path.join( cl_src_dir, 'logger.hpp') ) ,
			# # header_file( os.path.join( cl_src_dir, 'object.hpp') ) ,
			# header_file( os.path.join( cl_src_dir, 'logtarget.hpp') ) ,
			# header_file( os.path.join( cl_src_dir, 'point.hpp') ) ,
			# header_file( os.path.join( cl_src_dir, 'rectangle.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'size.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'special_folders.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'uuid_16b.hpp') ) ,
			# # header_file( os.path.join( cl_src_dir, 'typedefs.hpp') ) ,
			# # #header_file( os.path.join( cl_src_dir, 'template.hpp') )
			# ]

# layout_dir = os.path.join( local_env.root, '..', 'AMF', 'trunk', 'layout', 'include', 'layout' )
			
# layout_files = 	[ 	# 'accept_helper.h',
					# # 'accessor.h',
					# # 'animatable_property.h',
					# # 'animatable_property_bag.h',
					# # 'app_data.h',
					# # 'app_data_container.h',
					# # 'ardok_accessor.h',
					# # 'ardome_locator.h',
					# 'audio_mix_matrix.h',
					# 'base_finders.h',
					# 'basic_media_info.h',
					# 'basic_size_info.h',
					# # 'capability.h',
					# # 'channel_referencer.h',
					# # 'codec_definition.h',
					# # 'collections.h',
					# # 'collection_customizers.h',
					# # 'common.h',
					# # 'config.h',
					# # 'constant_property.h',
					# # 'container_definition.h',
					# # 'container_descriptor.h',
					# # 'creation_info.h',
					# # 'credentials.h',
					# # 'data_definition.h',
					# # 'definitions.h',
					# # 'descriptor.h',
					# # 'destination_settings.h',
					# # 'destination_track_info.h',
					# # 'edit_delta.h',
					# # 'edit_delta_event_adapter.h',
					# # 'edit_delta_visitor.h',
					# # 'edit_lock.h',
					# # 'edit_lock_group.h',
					# # 'effect_definition.h',
					# # 'export_defines.h',
					# # 'filter.h',
					# # 'ftp_accessor.h',
					# # 'generic_definition.h',
					# # 'http_accessor.h',
					# # 'index_descriptor.h',
					# # 'layout.h',
					# # 'layout_enums.h',
					# # 'local_locator.h',
					# # 'location.h',
					# # 'locator.h',
					# # 'locator_descriptor.h',
					# # 'lockable_vector.h',
					# 'master_media_object.h',
					# 'media_descriptor.h',
					# 'media_info.h',
					# 'media_object_base.h',
					# 'media_quality_descriptor.h',
					# 'media_track_item.h',
					# 'path_property.h',
					# 'physical_descriptor.h',
					# 'picture_descriptor.h',
					# 'product_info.h',
					# 'project.h',
					# 'property_holder.h',
					# 'quality_description.h',
					# 'revision_info.h',
					# 'service_locator.h',
					# 'smb_accessor.h',
					# 'smooth_function_curve.h',
					# 'smpte.h',
					# 'sound_descriptor.h',
					# 'source_media_object.h',
					# 'source_referencer.h',
					# 'svg_output_options.h',
					# 'svg_utilities.h',
					# 'synchronizer.h',
					# 'timecode_track_item.h',
					# 'timeline.h',
					# 'timeline_cut_functions.h',
					# 'timeline_edit_functions.h',
					# 'timeline_helper_functions.h',
					# 'timeline_insert_functions.h',
					# 'timeline_placement_functions.h',
					# 'timeline_remove_functions.h',
					# # 'to_text_edit_delta_visitor.h',
					# 'track.h',
					# 'track_configuration.h',
					# 'track_conf_definition.h',
					# 'track_definition.h',
					# 'track_descriptor.h',
					# 'track_item.h',
					# 'track_item_group.h',
					# 'track_item_paste_group.h',
					# 'track_item_paste_info.h',
					# 'track_referencer.h',
					# # 'transition.h',
					# # 'typedefs.h',
					# # 'value_list_property.h',
					# # 'version.h' 
					# ]
				
# def fix_layout_filename( fn ) :
	# return header_file( os.path.join( layout_dir, fn ) )
			
# headers.extend( map( fix_layout_filename, layout_files ) )





cl_src_dir = os.path.join( local_env.root, 'src', 'opencorelib', 'cl' )
layout_src_dir = os.path.join( local_env.root, '..', 'AMF', 'trunk', 'layout', 'include', 'layout' )
render_src_dir = os.path.join( local_env.root, '..', 'AMF', 'trunk', 'render', 'include', 'render' )
network_src_dir = os.path.join( local_env.root, '..', 'AMF', 'trunk', 'network', 'include', 'network' )

cl_headers = [
			# Core
			header_file( os.path.join( cl_src_dir, 'base_exception.hpp') ),
			
			header_file( os.path.join( cl_src_dir, 'core_enums.hpp') ),
			header_file( os.path.join( cl_src_dir, 'basic_enums.hpp') ),
			header_file( os.path.join( cl_src_dir, 'minimal_string_defines.hpp') ),
			header_file( os.path.join( cl_src_dir, 'invoker.hpp') ),
			header_file( os.path.join( cl_src_dir, 'typedefs.hpp') ),
			header_file( os.path.join( cl_src_dir, 'object.hpp') ),
			header_file( os.path.join( cl_src_dir, 'media_definitions.hpp') ),
			header_file( os.path.join( cl_src_dir, 'time_code.hpp') ),
			header_file( os.path.join( cl_src_dir, 'media_time.hpp') ),
			header_file( os.path.join( cl_src_dir, 'frames.hpp') ),
			header_file( os.path.join( cl_src_dir, 'span.hpp') ),
			# header_file( os.path.join( cl_src_dir, 'point.hpp') ),
			header_file( os.path.join( cl_src_dir, 'color.hpp') ),
			header_file( os.path.join( cl_src_dir, 'uuid_16b.hpp') ),
			header_file( os.path.join( cl_src_dir, 'event_handler.hpp') ),
			header_file( os.path.join( cl_src_dir, 'property_bag.hpp') ),
			# Layout
			header_file( os.path.join( layout_src_dir, 'layout_enums.h' ) ),
			header_file( os.path.join( layout_src_dir, 'typedefs.h' ) ),
			header_file( os.path.join( layout_src_dir, 'credentials.h' ) ),
			header_file( os.path.join( layout_src_dir, 'location.h' ) ),
			header_file( os.path.join( layout_src_dir, 'accessor.h' ) ),
			header_file( os.path.join( layout_src_dir, 'ardok_accessor.h' ) ),
			header_file( os.path.join( layout_src_dir, 'ftp_accessor.h' ) ),
			header_file( os.path.join( layout_src_dir, 'http_accessor.h' ) ),
			header_file( os.path.join( layout_src_dir, 'smb_accessor.h' ) ),
			header_file( os.path.join( layout_src_dir, 'locator.h' ) ),
			header_file( os.path.join( layout_src_dir, 'ardome_locator.h' ) ),
			header_file( os.path.join( layout_src_dir, 'local_locator.h' ) ),
			header_file( os.path.join( layout_src_dir, 'service_locator.h' ) ),
			header_file( os.path.join( layout_src_dir, 'descriptor.h' ) ),
			header_file( os.path.join( layout_src_dir, 'container_descriptor.h' ) ),
			header_file( os.path.join( layout_src_dir, 'locator_descriptor.h' ) ),
			header_file( os.path.join( layout_src_dir, 'picture_descriptor.h' ) ),
			header_file( os.path.join( layout_src_dir, 'sound_descriptor.h' ) ),
			header_file( os.path.join( layout_src_dir, 'physical_descriptor.h' ) ),
			header_file( os.path.join( layout_src_dir, 'index_descriptor.h' ) ),
			header_file( os.path.join( layout_src_dir, 'edit_lock.h' ) ),
			header_file( os.path.join( layout_src_dir, 'source_referencer.h' ) ),
			header_file( os.path.join( layout_src_dir, 'channel_referencer.h' ) ),
			header_file( os.path.join( layout_src_dir, 'track_item.h' ) ),
			header_file( os.path.join( layout_src_dir, 'media_track_item.h' ) ),
			header_file( os.path.join( layout_src_dir, 'timecode_track_item.h' ) ),
			header_file( os.path.join( layout_src_dir, 'track.h' ) ),
			header_file( os.path.join( layout_src_dir, 'media_object_base.h' ) ),
			header_file( os.path.join( layout_src_dir, 'master_media_object.h' ) ),
			header_file( os.path.join( layout_src_dir, 'source_media_object.h' ) ),
			header_file( os.path.join( layout_src_dir, 'timeline.h' ) ),
			header_file( os.path.join( layout_src_dir, 'track_item_group.h' ) ),
			header_file( os.path.join( layout_src_dir, 'track_item_paste_group.h' ) ),
			header_file( os.path.join( layout_src_dir, 'timeline_cut_functions.h' ) ),
			header_file( os.path.join( layout_src_dir, 'timeline_edit_functions.h' ) ),
			header_file( os.path.join( layout_src_dir, 'timeline_helper_functions.h' ) ),
			header_file( os.path.join( layout_src_dir, 'timeline_insert_functions.h' ) ),
			header_file( os.path.join( layout_src_dir, 'timeline_placement_functions.h' ) ),
			header_file( os.path.join( layout_src_dir, 'timeline_remove_functions.h' ) ),
			header_file( os.path.join( layout_src_dir, 'project.h' ) ),
			header_file( os.path.join( layout_src_dir, 'destination_track_info.h' ) ),
			header_file( os.path.join( layout_src_dir, 'basic_media_info.h' ) ),
			header_file( os.path.join( layout_src_dir, 'basic_size_info.h' ) ),
			#header_file( os.path.join( layout_src_dir, 'lockable_vector.h' ) ),
			#header_file( os.path.join( layout_src_dir, 'collections.h' ) ),
			#header_file( os.path.join( layout_src_dir, 'collection_customizers.h' ) ),
			# Render
			header_file( os.path.join( render_src_dir, 'typedefs.h' ) ),
			header_file( os.path.join( render_src_dir, 'amf_initializer.h' ) ),
			header_file( os.path.join( render_src_dir, 'amf_settings.h' ) ),
			header_file( os.path.join( render_src_dir, 'enums.h' ) ),
			header_file( os.path.join( render_src_dir, 'host_info.h' ) ),
			header_file( os.path.join( render_src_dir, 'server_info.h' ) ),
			header_file( os.path.join( render_src_dir, 'audio.h' ) ),
			header_file( os.path.join( render_src_dir, 'image.h' ) ),
			header_file( os.path.join( render_src_dir, 'media_frame.h' ) ),
			header_file( os.path.join( render_src_dir, 'filter_graph.h' ) ),
			header_file( os.path.join( render_src_dir, 'event_arg_classes.h' ) ),
			header_file( os.path.join( render_src_dir, 'player.h' ) ),
			# Network
			header_file( os.path.join( network_src_dir, 'invokerdata.h' ) ),
			header_file( os.path.join( network_src_dir, 'invokersettings.h' ) ),
			header_file( os.path.join( network_src_dir, 'messagebus_typedefs.h' ) ),
			header_file( os.path.join( network_src_dir, 'messagebus.h' ) ),
			header_file( os.path.join( network_src_dir, 'messagebus_config.h' ) ),
			header_file( os.path.join( network_src_dir, 'messagebus_message.h' ) ),
			header_file( os.path.join( network_src_dir, 'service_connector.h' ) ),]







obj = None;

owl_output_dir = os.path.join( local_env.root, 'wrappers', 'src' )

generate_files = True

if local_env['debug'] == '1' :
	print 'Debug build. Assuming AST and source files already generated by release build.'
	generate_files = False
	
		
if generate_files :
	print 'Building AST...'

	files = header_files( cl_headers, defines, [] )

	core_assembly = assembly( 'AMF', files, dep_asses )

	fd = open( 'assembly.xml', "w" )
	fd.write( core_assembly.xml_str() )
	

if local_env['PLATFORM'] == 'darwin' : 
	objc_wrapper = owl.wrapper.objc.objc()
	objc_options = core_objc_bind_options( os.path.join( local_env.root, 'bcomp' ), [core_assembly] )

	wrapper_files = objc_wrapper.bind( core_assembly, objc_options, 'objective_c/src' )
	obj = local_env.framework( 'AML', sources = wrapper_files['source_files'], headers = wrapper_files['header_files'], info_plist = 'objective_c/src/Info.plist' )
elif local_env['PLATFORM'] == 'win32' :    

	script_location = os.path.dirname( os.path.abspath( os.getcwd( ) ) )
	
	if generate_files :
		print 'Generating .NET source files...'
		csharp_wrapper = owl.wrapper.c_sharp.c_sharp()
		csharp_options = core_c_sharp_bind_options( os.path.join( local_env.root, 'external' ), owl_output_dir, [core_assembly] )

		wrapper_files = csharp_wrapper.bind( core_assembly, csharp_options )
	else :
		wrapper_files = {'source_files' : [], 'header_files' : [] }
		wrapper_files['header_files'] = local_env.Glob(os.path.join(owl_output_dir, '*.hpp'), True, False, True)
		wrapper_files['source_files'] = local_env.Glob(os.path.join(owl_output_dir, '*.cpp'), True, False, True)
		
	
	aux_dir = os.path.join( local_env.root, 'external', 'owl', 'wrapper', 'c_sharp', 'cppsrc' )
	aux_headers = local_env.Glob(os.path.join(aux_dir, '*.hpp'), True, False, True)
	aux_sources = local_env.Glob(os.path.join(aux_dir, '*.cpp'), True, False, True)
	
	wrapper_files['header_files'].extend(aux_headers)
	wrapper_files['source_files'].extend(aux_sources)
	
	local_env.Append( CPPFLAGS = [ '/EHa', '/clr', '/AI "C:\\program\\Reference Assemblies\\Microsoft\\Framework\\v3.0"', '/FU "WindowsBase.dll"' ] ) 
	obj = local_env.shared_library( 'AML', sources = wrapper_files['source_files'], 
									headers = wrapper_files['header_files'], pre = [ os.path.join(owl_output_dir, 'precompiled_headers.cpp'), os.path.join(owl_output_dir, 'precompiled_headers.hpp') ] )
	 
Return( 'obj' )

